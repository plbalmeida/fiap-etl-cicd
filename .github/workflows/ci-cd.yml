name: CI/CD

on: 
  push:
    branches: 
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install pyspark boto3 flake8

      - name: Run Flake8
        run: |
          flake8 ./src --ignore=E501

  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install pyspark pytest

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$(pwd)/src" >> $GITHUB_ENV

      - name: Run tests
        run: |
          pytest ./src/tests

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.0.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Read Terraform action from file
        id: read_action
        run: |
          ACTION=$(cat terraform_action.txt)
          echo "ACTION=${ACTION}" >> $GITHUB_ENV

      - name: Zip utils.py
        run: |
          zip -j utils.zip src/utils.py

      - name: Upload utils.zip to S3
        run: |
          aws s3 cp utils.zip s3://fiap-etl-20240918/libs/

      - name: Terraform Init and Apply/Destroy
        run: |
          cd infra/glue
          terraform init
          if [ "${{ env.ACTION }}" == "apply" ]; then
            terraform init
            terraform plan
            terraform apply -auto-approve
          elif [ "${{ env.ACTION }}" == "destroy" ]; then
            terraform init
            terraform plan
            terraform destroy -auto-approve
          else
            echo "Invalid action specified in terraform-action.txt"
            exit 1
          fi
      
      - name: Install AWS CLI
        run: |
          sudo apt-get install -y awscli

      - name: Upload Python scripts to S3
        run: |
          aws s3 cp src/jobs/ s3://fiap-etl-20240918/scripts/ --recursive --exclude "*" --include "*.py"
